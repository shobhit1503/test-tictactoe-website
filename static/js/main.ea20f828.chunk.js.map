{"version":3,"sources":["Components/Icons.js","App.js","reportWebVitals.js","index.js"],"names":["Icons","name","className","size","color","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","console","log","Container","position","Row","Col","md","includes","Button","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea20f828.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {GrClose, GrRadial, GrGolang} from\"react-icons/gr\";\r\n\r\nconst Icons = ({name}) => {\r\n    switch (name) {\r\n        case \"circle\":\r\n            return(<GrRadial className=\"icons\" size=\"3em\" color=\"yellow\"/>);\r\n        case \"cross\":\r\n            return(<GrClose className=\"icons\" size=\"3em\" color=\"red\"/>);\r\n        default:\r\n            return(<GrGolang className=\"icons\" size=\"3em\"/>);\r\n    }   \r\n}\r\nexport default Icons;","import React, { useState } from \"react\";\nimport Icons from './Components/Icons';\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  }\n  const checkIsWinner = () => {\n    if (itemArray[0] !== \"empty\" && itemArray[0] === itemArray[1] && itemArray[1] === itemArray[2]) {\n      setWinMessage(itemArray[0]);\n    }\n    if (itemArray[3] !== \"empty\" && itemArray[3] === itemArray[4] && itemArray[4] === itemArray[5]) {\n      setWinMessage(itemArray[3]);\n    }\n    if (itemArray[6] !== \"empty\" && itemArray[6] === itemArray[7] && itemArray[7] === itemArray[8]) {\n      setWinMessage(itemArray[6]);\n    }\n    if (itemArray[0] !== \"empty\" && itemArray[0] === itemArray[3] && itemArray[3] === itemArray[6]) {\n      setWinMessage(itemArray[0]);\n    }\n    if (itemArray[1] !== \"empty\" && itemArray[1] === itemArray[4] && itemArray[4] === itemArray[7]) {\n      setWinMessage(itemArray[1]);\n    }\n    if (itemArray[2] !== \"empty\" && itemArray[2] === itemArray[5] && itemArray[5] === itemArray[8]) {\n      setWinMessage(itemArray[2]);\n    }\n    if (itemArray[0] !== \"empty\" && itemArray[0] === itemArray[4] && itemArray[4] === itemArray[8]) {\n      setWinMessage(itemArray[0]);\n    }\n    if (itemArray[2] !== \"empty\" && itemArray[2] === itemArray[4] && itemArray[4] === itemArray[6]) {\n      setWinMessage(itemArray[2]);\n    }\n  }\n\n  const changeItem = (itemNumber) => {\n\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\" });\n    }\n\n    if (itemArray[itemNumber] === \"empty\") {\n      console.log(isCross);\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    }\n    else {\n      return toast(\"Already filled\", { type: \"error\" })\n    }\n\n    checkIsWinner();\n  }\n  \n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage || !(itemArray.includes(\"empty\")) ? (\n            <div className=\"mb-2 mt-2\" >\n              <h1 className=\"text-success text-uppercase text-center\"> {winMessage} </h1>\n              <Button color=\"success\" block onClick={reloadGame}>Reload the Game</Button>\n            </div>\n          ) : (\n          <h1 className=\"text-center text-warning\">\n            {isCross ? \"Cross\" : \"Circle\"} turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"warning\" onClick={() => changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icons name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}